---
# tasks file for ansible-dotfiles

####################
# OS Bootstrapping #
####################
- name: manually determine OS
  raw: 'cat /etc/redhat-release'
  register: os_version
  failed_when: false
  changed_when: false
  tags: fedora-prep

- name: install python and deps for ansible modules
  raw: sudo dnf install -y python2 python2-dnf libselinux-python sudo
  when: os_version.stdout.find('Fedora') != -1
  become: yes
  tags: fedora-prep

- name: manually detect OS X
  raw: uname -s
  register: is_osx
  failed_when: false
  changed_when: false
  tags: osx-prep

- name: determine if homebrew is installed
  stat:
    path: /usr/local/bin/brew
  register: homebrew_present
  when: is_osx.stdout.find('Darwin') != -1

- name: install homebrew for ansible modules
  raw: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  when:
    - is_osx.stdout.find('Darwin') != -1
    - homebrew_present is defined
    - homebrew_present.stat.exists | bool != true
  tags: osx-prep

################
# Gather facts #
################
- name: get facts manually
  setup:
    filter: "{{ item }}"
  with_items: "{{ facts_to_gather }}"
  tags:
    - dotfiles
    - ssh
    - pip

- name: print out vars
  debug:
    var: "{{ item }}"
    verbosity: 2
  with_items: "{{ facts_to_gather }}"
  tags:
    - dotfiles
    - ssh
    - pip

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_system }}.yml"
  tags:
    - vars
    - pip

#####################
# Setup local cache #
#####################
- name: create local cache dir for code
  file:
    path: "{{ cache_path }}"
    state: directory
  connection: local
  tags:
    - git

- name: check out main repos
  git:
    repo: "{{ item.repo }}"
    dest: "{{ cache_path }}/{{ item.repo_name }}"
    force: yes
    accept_hostkey: yes
    version: "{{ item.branch }}"
  with_items: "{{ git_repositories_to_checkout }}"
  connection: local
  run_once: yes
  tags:
    - git
    - github

########################
# Set up remote system #
########################
- name: install pip
  easy_install:
    name: pip
    state: present
  become: yes
  when: ansible_os_family != "Debian"

- name: install packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state=present
  become: yes
  when: ansible_pkg_mgr != "homebrew"
  with_items: "{{ packages_to_install }}"

- name: install homebrew packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state=present
  when: ansible_pkg_mgr == "homebrew"
  with_items:
    - tmux
    - ruby
    - git

- name: install gems
  gem:
    name: tmuxinator
    state: present
    executable: "{{ gem_executable }}"
    env_shebang: yes
  become: yes
  ignore_errors: true
  tags:
    - tmuxinator

- name: install pip
  easy_install:
    name: pip
    state: present
  when: enable_virtualenv_wrapper | bool
  become: yes
  tags:
    - pip

- name: install pip packages
  pip:
    name: "{{ item }}"
    state: present
    executable: "{{ pip_executable }}"
    extra_args: --ignore-installed six
  when: enable_virtualenv_wrapper | bool
  become: yes
  with_items:
    - virtualenv
    - virtualenvwrapper
  tags:
    - pip

- name: add ssh keys to authorized_keys
  authorized_key:
    user: '{{ username }}'
    state: present
    key: '{{ item }}'
  with_items:
    - '{{ SSH_KEYS_ADD | default([]) }}'
  tags:
    - ssh-keys

- name: populate ssh private key
  copy:
    content: "{{ SSH_KEYS.PRIVATE }}"
    dest: "{{ user_dir }}/.ssh/id_rsa"
    owner: "{{ username }}"
    mode: 0600
    backup: yes
  when: SSH_KEYS is defined
  tags:
    - ssh-keys

- name: populate ssh public key
  copy:
    content: "{{ SSH_KEYS.PUBLIC }}"
    dest: "{{ user_dir }}/.ssh/id_rsa.pub"
    owner: "{{ username }}"
    mode: 0600
    backup: yes
  when: SSH_KEYS is defined
  tags:
    - ssh-keys

- name: wipe dotfiles directory
  file:
    path: "{{ remote_dotfile_location }}"
    state: absent
  when: wipe_dotfiles | bool

- name: ensure directories exists
  file:
    path: "{{ item }}"
    state: directory
    mode: 0750
  with_items: "{{ dirs_to_make }}"

############################
# Populate remote dotfiles #
############################
- name: copy dotfiles repos over
  synchronize:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    recursive: yes
    archive: no
  changed_when: false
  with_items: "{{ files_to_sync }}"
  tags:
    - git
    - tmuxinator

- name: symlink dot files
  file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
  with_items: "{{ symlinks_to_create }}"

- name: check file existence before symlinking
  stat:
    path: "{{ item.src }}"
  register: extra_dotfile_existence
  with_items: "{{ extra_symlinks_to_create }}"
  tags:
    - dotfiles

- name: print extra file existence
  debug:
    var: "{{ item }}"
    verbosity: 2
  with_items: "{{ extra_dotfile_existence.results }}"
  tags:
    - dotfiles

- name: symlink extra dot files
  file:
    src: "{{ item.item.src }}"
    dest: "{{ item.item.dest }}"
    state: link
  with_items: "{{ extra_dotfile_existence.results }}"
  when: item.stat.exists | bool
  tags:
    - dotfiles

- name: template .bash_profile/.bashrc
  template:
    src: bash_profile.j2
    dest: "{{ user_dir }}/{{ bash_profile_file }}"
    backup: yes
  tags:
    - bashrc
    - bash_profile

- name: template .ssh/config
  template:
    src: ssh_config.j2
    dest: "{{ user_dir }}/.ssh/config"
    backup: yes
  tags:
    - ssh
    - ssh-config

- name: run erroneous commands
  shell: '{{ item }}'
  with_items: "{{ shell_commands }}"
  changed_when: false
  failed_when: false
  tags:
    - shell
    - git
