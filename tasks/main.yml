---
################
# Gather facts #
################
- name: get facts manually
  setup:
  tags:
    - dotfiles
    - ssh
    - pip

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_system }}.yml"
  tags:
    - vars
    - pip

#####################
# Setup local cache #
#####################
- name: create local cache dir for code
  file:
    path: "{{ cache_path }}"
    state: directory
  connection: local
  tags:
    - git

- name: check out main repos
  git:
    repo: "{{ item.repo }}"
    dest: "{{ cache_path }}/{{ item.repo_name }}"
    force: yes
    accept_hostkey: yes
    version: "{{ item.branch }}"
  with_items: "{{ git_repositories_to_checkout }}"
  connection: local
  delegate_to: localhost
  run_once: yes
  tags:
    - git
    - github

# ########################
# # Set up remote system #
# ########################
- name: add ssh keys to authorized_keys
  authorized_key:
    user: "{{ item.username | default(username) }}"
    state: "{{ item.state | default('present') }}"
    key: "{{ item.key }}"
  with_items:
    - "{{ ssh_public_keys | default([]) }}"
  when:
    - (item.add_to_auth_keys | default(true)) | bool
  tags:
    - ssh-keys

- name: populate ssh public key
  copy:
    content: "{{ item.key }}"
    dest: "{{ user_dir }}/.ssh/{{ item.key_name }}"
    owner: "{{ item.username | default(username) }}"
    mode: 0600
    backup: yes
  with_items:
    - "{{ ssh_public_keys }}"
  tags:
    - ssh-keys

- name: populate ssh private key
  copy:
    content: "{{ item.content }}"
    dest: "{{ user_dir }}/.ssh/{{ item.key_name }}"
    owner: "{{ item.username | default(username) }}"
    mode: 0600
    backup: yes
  with_items:
    - "{{ ssh_private_keys }}"
  tags:
    - ssh-keys

- name: wipe dotfiles directory
  file:
    path: "{{ remote_dotfile_location }}"
    state: absent
  when: wipe_dotfiles | bool

- name: ensure directories exists
  file:
    path: "{{ item }}"
    state: directory
    mode: 0750
  with_items: "{{ dirs_to_make }}"

############################
# Populate remote dotfiles #
############################
- name: copy dotfiles repos over
  synchronize:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    recursive: yes
    archive: no
  changed_when: false
  with_items: "{{ files_to_sync }}"
  tags:
    - git
    - tmuxinator

- name: symlink dot files
  file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
  with_items: "{{ symlinks_to_create }}"

- name: check file existence before symlinking
  stat:
    path: "{{ item.src }}"
  register: extra_dotfile_existence
  with_items: "{{ extra_symlinks_to_create }}"
  tags:
    - dotfiles

- name: print extra file existence
  debug:
    var: "{{ item }}"
    verbosity: 2
  with_items: "{{ extra_dotfile_existence.results }}"
  tags:
    - dotfiles

- name: symlink extra dot files
  file:
    src: "{{ item.item.src }}"
    dest: "{{ item.item.dest }}"
    state: link
  with_items: "{{ extra_dotfile_existence.results }}"
  when: item.stat.exists | bool
  tags:
    - dotfiles

- name: template .bash_profile/.bashrc
  template:
    src: bash_profile.j2
    dest: "{{ user_dir }}/{{ bash_profile_file }}"
    backup: yes
  tags:
    - bashrc
    - bash_profile

- name: template .ssh/config
  template:
    src: ssh_config.j2
    dest: "{{ user_dir }}/.ssh/config"
    backup: yes
  tags:
    - ssh
    - ssh-config

###################################
# Create Custom Files/Directories #
###################################
- name: Create/delete and directories or files
  file:
    src: "{{ item.src | default(omit) }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.user | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
    state: "{{ item.state }}"
    force: "{{ item.force | default(omit) }}"
  with_items:
    - "{{ custom_files_dirs | default([]) }}"
  tags:
    - custom-files

- name: populate custom files with content
  copy:
    content: "{{ item.content }}"
    dest: "{{ item.path }}"
    owner: "{{ item.username | default(username) }}"
    mode: "{{ item.mode | default('0600') }}"
    backup: yes
  with_items:
    - "{{ custom_files }}"
  tags:
    - custom-files

#################################
# Run any custom shell commands #
#################################
- name: run erroneous commands
  shell: '{{ item }}'
  with_items: "{{ shell_commands }}"
  changed_when: false
  failed_when: false
  tags:
    - shell
    - git
